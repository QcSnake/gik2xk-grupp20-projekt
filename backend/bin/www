#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const seedDatabase = require('../seeders/dbSeed');


var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

// Skapa HTTP-server
var server = http.createServer(app);

const db = require("../models/");

// Anslut till databasen och starta servern
async function startServer() {
  try {
    // Testa databasanslutning
    await db.sequelize.authenticate();
    console.log('Ansluten till databasen.');
    
    // Skapa produkttabell om den behövs
    try {
      await db.sequelize.query(`
        CREATE TABLE IF NOT EXISTS products (
          id INT PRIMARY KEY AUTO_INCREMENT,
          title VARCHAR(100) NOT NULL,
          description TEXT NOT NULL,
          price DOUBLE NOT NULL,
          product_img VARCHAR(500),
          units INT DEFAULT 0,
          created_at DATETIME NOT NULL,
          updated_at DATETIME NOT NULL
        )
      `);
      console.log("Produkttabellen finns nu");
    } catch (tableErr) {
      console.error("Fel vid skapande av produkttabell:", tableErr.message);
    }
    
    try {
      console.log('Återskapar alla tabeller');
      await db.sequelize.sync({ force: true });
      console.log('Tabeller återskapade');
    } catch (err) {
      console.error('Kunde inte återskapa tabeller:', err.message);
      process.exit(1);
    }
    
    // Fyll databasen med startdata
    await seedDatabase();
    console.log('Databas initierad');
    
    // Starta servern
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    
    console.log(`Server igång på http://localhost:${port}`);
  } catch (error) {
    console.error('Kunde inte ansluta till databasen:', error);
    process.exit(1);
  }
}

startServer();


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Visa felmeddelanden
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' kräver förhöjda rättigheter');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' används redan');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Server lyssnar
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Lyssnar på ' + bind);
}
