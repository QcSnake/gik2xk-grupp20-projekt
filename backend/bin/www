#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const seedDatabase = require('../seeders/dbSeed');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

const db = require("../models/");

// Connect to database and start server
async function startServer() {
  try {
    // Test database connection
    await db.sequelize.authenticate();
    console.log('Database connection has been established successfully.');
    
    // Create products table directly if needed
    try {
      await db.sequelize.query(`
        CREATE TABLE IF NOT EXISTS products (
          id INT PRIMARY KEY AUTO_INCREMENT,
          title VARCHAR(100) NOT NULL,
          description TEXT NOT NULL,
          price DOUBLE NOT NULL,
          product_img VARCHAR(500),
          units INT DEFAULT 0,
          created_at DATETIME NOT NULL,
          updated_at DATETIME NOT NULL
        )
      `);
      console.log("Ensured products table exists");
    } catch (tableErr) {
      console.error("Error ensuring products table:", tableErr.message);
    }
    
    // Force recreate all tables - use with caution as this will delete all data
    try {
      console.log('Forcing recreate of all tables to fix schema issues');
      await db.sequelize.sync({ force: true });
      console.log('Database tables recreated successfully');
    } catch (err) {
      console.error('Error recreating tables:', err.message);
      process.exit(1);
    }
    
    // Seed the database with initial data
    await seedDatabase();
    console.log('Database seeded successfully');
    
    // Start the server
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    
    console.log(`Server running on http://localhost:${port}`);
  } catch (error) {
    console.error('Unable to connect to the database or start server:', error);
    process.exit(1);
  }
}

startServer();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
